{"remainingRequest":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/babel-loader/lib/index.js!/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jyothish/Documents/purple-free-vue/template/demo_1/src/components/apps/Kanban.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/src/components/apps/Kanban.vue","mtime":1605587475570},{"path":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGRyYWd1bGEgZnJvbSAnZHJhZ3VsYSc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnS2FuYmFuQm9hcmQnLAogIHByb3BzOiB7CiAgICBzdGFnZXM6IHt9LAogICAgYmxvY2tzOiB7fQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7fTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBsb2NhbEJsb2NrczogZnVuY3Rpb24gbG9jYWxCbG9ja3MoKSB7CiAgICAgIHJldHVybiB0aGlzLmJsb2NrczsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGdldEJsb2NrczogZnVuY3Rpb24gZ2V0QmxvY2tzKHN0YXR1cykgewogICAgICByZXR1cm4gdGhpcy5sb2NhbEJsb2Nrcy5maWx0ZXIoZnVuY3Rpb24gKGJsb2NrKSB7CiAgICAgICAgcmV0dXJuIGJsb2NrLnN0YXR1cyA9PT0gc3RhdHVzOwogICAgICB9KTsKICAgIH0KICB9LAogIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQoKSB7CiAgICB0aGlzLmRyYWtlLmNvbnRhaW5lcnMgPSB0aGlzLiRyZWZzLmxpc3Q7CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB0aGlzLmRyYWtlID0gZHJhZ3VsYSh0aGlzLiRyZWZzLmxpc3QpLm9uKCdkcmFnJywgZnVuY3Rpb24gKGVsKSB7CiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2lzLW1vdmluZycpOwogICAgfSkub24oJ2Ryb3AnLCBmdW5jdGlvbiAoYmxvY2ssIGxpc3QpIHsKICAgICAgdmFyIGluZGV4ID0gMDsKCiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxpc3QuY2hpbGRyZW4ubGVuZ3RoOyBpbmRleCArPSAxKSB7CiAgICAgICAgaWYgKGxpc3QuY2hpbGRyZW5baW5kZXhdLmNsYXNzTGlzdC5jb250YWlucygnaXMtbW92aW5nJykpIGJyZWFrOwogICAgICB9CgogICAgICBfdGhpcy4kZW1pdCgndXBkYXRlLWJsb2NrJywgYmxvY2suZGF0YXNldC5ibG9ja0lkLCBsaXN0LmRhdGFzZXQuc3RhdHVzLCBpbmRleCk7CiAgICB9KS5vbignZHJhZ2VuZCcsIGZ1bmN0aW9uIChlbCkgewogICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1tb3ZpbmcnKTsKICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2lzLW1vdmVkJyk7CiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtbW92ZWQnKTsKICAgICAgICB9LCA2MDApOwogICAgICB9LCAxMDApOwogICAgfSk7CiAgfQp9Ow=="},{"version":3,"sources":["Kanban.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAA,OAAA,MAAA,SAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA,EADA;AAEA,IAAA,MAAA,EAAA;AAFA,GAFA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA,EAAA;AAEA,GATA;AAUA,EAAA,QAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,aAAA,KAAA,MAAA;AACA;AAHA,GAVA;AAeA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,MADA,EACA;AACA,aAAA,KAAA,WAAA,CAAA,MAAA,CAAA,UAAA,KAAA;AAAA,eAAA,KAAA,CAAA,MAAA,KAAA,MAAA;AAAA,OAAA,CAAA;AACA;AAHA,GAfA;AAoBA,EAAA,OApBA,qBAoBA;AACA,SAAA,KAAA,CAAA,UAAA,GAAA,KAAA,KAAA,CAAA,IAAA;AACA,GAtBA;AAuBA,EAAA,OAvBA,qBAuBA;AAAA;;AACA,SAAA,KAAA,GAAA,OAAA,CAAA,KAAA,KAAA,CAAA,IAAA,CAAA,CACA,EADA,CACA,MADA,EACA,UAAA,EAAA,EAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAA,WAAA;AACA,KAHA,EAIA,EAJA,CAIA,MAJA,EAIA,UAAA,KAAA,EAAA,IAAA,EAAA;AACA,UAAA,KAAA,GAAA,CAAA;;AACA,WAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,IAAA,CAAA,QAAA,CAAA,MAAA,EAAA,KAAA,IAAA,CAAA,EAAA;AACA,YAAA,IAAA,CAAA,QAAA,CAAA,KAAA,EAAA,SAAA,CAAA,QAAA,CAAA,WAAA,CAAA,EAAA;AACA;;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,cAAA,EAAA,KAAA,CAAA,OAAA,CAAA,OAAA,EAAA,IAAA,CAAA,OAAA,CAAA,MAAA,EAAA,KAAA;AACA,KAVA,EAWA,EAXA,CAWA,SAXA,EAWA,UAAA,EAAA,EAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAAA,WAAA;AACA,MAAA,MAAA,CAAA,UAAA,CAAA,YAAA;AACA,QAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAA,UAAA;AACA,QAAA,MAAA,CAAA,UAAA,CAAA,YAAA;AACA,UAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAAA,UAAA;AACA,SAFA,EAEA,GAFA;AAGA,OALA,EAKA,GALA;AAMA,KAnBA,CAAA;AAoBA;AA5CA,CAAA","sourcesContent":["<template>\n  <div class=\"drag-container\">\n    <ul class=\"drag-list\">\n      <li v-for=\"stage in stages\" class=\"drag-column board-portlet\" :class=\"{['drag-column-' + stage]: true}\" :key=\"stage\">\n        <span class=\"drag-column-header\">\n          <slot :name=\"stage\">\n            <h2>{{ stage }}</h2>\n          </slot>\n        </span>\n        <div class=\"drag-options\"></div>\n        <ul class=\"drag-inner-list portlet-card-list\" ref=\"list\" :data-status=\"stage\">\n          <li class=\"drag-item portlet-card\" v-for=\"block in getBlocks(stage)\" :data-block-id=\"block.id\" :key=\"block.id\">\n            <slot :name=\"block.id\">\n              <strong>{{ block.status }}</strong>\n              <div>{{ block.id }}</div>\n            </slot>\n          </li>\n        </ul>\n        <div class=\"drag-column-footer add-portlet\">\n            <slot :name=\"`footer-${stage}`\"></slot>\n        </div>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n  import dragula from 'dragula';\n  export default {\n    name: 'KanbanBoard',\n    props: {\n      stages: {},\n      blocks: {},\n    },\n    data() {\n      return {\n      };\n    },\n    computed: {\n      localBlocks() {\n        return this.blocks;\n      },\n    },\n    methods: {\n      getBlocks(status) {\n        return this.localBlocks.filter(block => block.status === status);\n      },\n    },\n  updated() {\n    this.drake.containers = this.$refs.list;\n  },\n  mounted() {\n    this.drake = dragula(this.$refs.list)\n      .on('drag', (el) => {\n        el.classList.add('is-moving');\n      })\n      .on('drop', (block, list) => {\n        let index = 0;\n        for (index = 0; index < list.children.length; index += 1) {\n          if (list.children[index].classList.contains('is-moving')) break;\n        }\n        this.$emit('update-block', block.dataset.blockId, list.dataset.status, index);\n      })\n      .on('dragend', (el) => {\n        el.classList.remove('is-moving');\n        window.setTimeout(() => {\n          el.classList.add('is-moved');\n          window.setTimeout(() => {\n            el.classList.remove('is-moved');\n          }, 600);\n        }, 100);\n      });\n  }\n  };\n</script>"],"sourceRoot":"src/components/apps"}]}