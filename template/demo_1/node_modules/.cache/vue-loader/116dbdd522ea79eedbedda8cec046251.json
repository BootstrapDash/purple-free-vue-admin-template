{"remainingRequest":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jyothish/Documents/purple-free-vue/template/demo_1/src/pages/widgets/index.vue?vue&type=template&id=f2b16ec4&scoped=true&","dependencies":[{"path":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/src/pages/widgets/index.vue","mtime":1605587475627},{"path":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/purple-free-vue/template/demo_1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("section", { staticClass: "widget" }, [
    _c("div", [
      _c("div", { staticClass: "row" }, [
        _vm._m(0),
        _vm._m(1),
        _vm._m(2),
        _vm._m(3),
        _vm._m(4),
        _vm._m(5),
        _vm._m(6),
        _vm._m(7),
        _vm._m(8),
        _vm._m(9),
        _vm._m(10),
        _vm._m(11),
        _vm._m(12),
        _c("div", { staticClass: "col-md-7 grid-margin stretch-card" }, [
          _c("div", { staticClass: "card" }, [
            _c(
              "div",
              { staticClass: "card-body" },
              [
                _vm._m(13),
                _c("visitAndSalesStatitics", {
                  staticClass: "mt-5",
                  attrs: { height: 170 }
                })
              ],
              1
            )
          ])
        ]),
        _c("div", { staticClass: "col-md-5 grid-margin stretch-card" }, [
          _c("div", { staticClass: "card" }, [
            _c(
              "div",
              { staticClass: "card-body" },
              [
                _c("h4", { staticClass: "card-title" }, [
                  _vm._v("Traffic Sources")
                ]),
                _c("trafficSourceChart", { attrs: { height: 200 } }),
                _vm._m(14)
              ],
              1
            )
          ])
        ]),
        _vm._m(15),
        _vm._m(16),
        _vm._m(17),
        _vm._m(18),
        _vm._m(19),
        _vm._m(20),
        _c(
          "div",
          {
            staticClass:
              "col-xl-3 col-lg-6 col-md-6 col-sm-6 grid-margin stretch-card"
          },
          [
            _c(
              "div",
              { staticClass: "card card-statistics" },
              [_vm._m(21), _c("totalInvoice", { attrs: { height: 40 } })],
              1
            )
          ]
        ),
        _c(
          "div",
          {
            staticClass:
              "col-xl-3 col-lg-6 col-md-6 col-sm-6 grid-margin stretch-card"
          },
          [
            _c(
              "div",
              { staticClass: "card card-statistics" },
              [_vm._m(22), _c("totalExpence", { attrs: { height: 40 } })],
              1
            )
          ]
        ),
        _c(
          "div",
          {
            staticClass:
              "col-xl-3 col-lg-6 col-md-6 col-sm-6 grid-margin stretch-card"
          },
          [
            _c(
              "div",
              { staticClass: "card card-statistics" },
              [_vm._m(23), _c("unPaidInvoices", { attrs: { height: 40 } })],
              1
            )
          ]
        ),
        _c(
          "div",
          {
            staticClass:
              "col-xl-3 col-lg-6 col-md-6 col-sm-6 grid-margin stretch-card"
          },
          [
            _c(
              "div",
              { staticClass: "card card-statistics" },
              [_vm._m(24), _c("amountDue", { attrs: { height: 40 } })],
              1
            )
          ]
        )
      ]),
      _c("div", { staticClass: "row" }, [
        _vm._m(25),
        _vm._m(26),
        _c(
          "div",
          {
            staticClass: "col-sm-6 col-md-6 col-lg-6 grid-margin stretch-card"
          },
          [
            _c("div", { staticClass: "card" }, [
              _c("div", { staticClass: "card-body" }, [
                _c("div", { staticClass: "row" }, [
                  _c(
                    "div",
                    { staticClass: "col-md-5 mt-3" },
                    [_c("activeUsers", { attrs: { height: 300 } })],
                    1
                  ),
                  _vm._m(27)
                ])
              ])
            ])
          ]
        ),
        _c(
          "div",
          {
            staticClass: "col-sm-6 col-md-6 col-lg-6 grid-margin stretch-card"
          },
          [
            _c("div", { staticClass: "card" }, [
              _c("div", { staticClass: "card-body" }, [
                _c("div", { staticClass: "row" }, [
                  _vm._m(28),
                  _c(
                    "div",
                    { staticClass: "col-md-5 mt-5" },
                    [_c("amountDueLine", { attrs: { height: 200 } })],
                    1
                  )
                ])
              ])
            ])
          ]
        ),
        _vm._m(29),
        _c("div", { staticClass: "col-lg-5 grid-margin stretch-card" }, [
          _c("div", { staticClass: "card" }, [
            _c(
              "div",
              { staticClass: "card-body" },
              [
                _c("h4", { staticClass: "card-title text-white" }, [
                  _vm._v("Todo")
                ]),
                _c("todoList")
              ],
              1
            )
          ])
        ]),
        _vm._m(30),
        _vm._m(31),
        _vm._m(32),
        _vm._m(33),
        _vm._m(34),
        _vm._m(35),
        _vm._m(36),
        _vm._m(37),
        _vm._m(38),
        _c(
          "div",
          {
            staticClass:
              "col-xl-7 col-lg-7 col-md-6 col-sm-12 grid-margin stretch-card"
          },
          [
            _c("div", { staticClass: "card review-card" }, [
              _c(
                "div",
                {
                  staticClass:
                    "card-header header-sm d-flex justify-content-between align-items-center"
                },
                [
                  _c("h4", { staticClass: "card-title mb-0" }, [
                    _vm._v("Reviews")
                  ]),
                  _c(
                    "div",
                    { staticClass: "wrapper d-flex align-items-center" },
                    [
                      _c("p", { staticClass: "mb-0" }, [
                        _vm._v("23 New Reviews")
                      ]),
                      _c(
                        "b-dropdown",
                        {
                          staticClass: "btn dotted-btn-transparent",
                          attrs: { id: "ddown7", text: "Dropdown" }
                        },
                        [
                          _c("template", { slot: "button-content" }, [
                            _c("i", { staticClass: "mdi mdi-dots-vertical" })
                          ]),
                          _c("b-dropdown-item", [_vm._v("Today")]),
                          _c("b-dropdown-item", [_vm._v("Yesterday")])
                        ],
                        2
                      )
                    ],
                    1
                  )
                ]
              ),
              _c("div", { staticClass: "card-body no-gutter" }, [
                _c("div", { staticClass: "list-item" }, [
                  _vm._m(39),
                  _c("div", { staticClass: "content" }, [
                    _c("div", { staticClass: "d-flex align-items-center" }, [
                      _c("h6", { staticClass: "product-name" }, [
                        _vm._v("Air Pod")
                      ]),
                      _c(
                        "small",
                        { staticClass: "time ml-3 d-none d-sm-block" },
                        [_vm._v("08.34 AM")]
                      ),
                      _c(
                        "div",
                        { staticClass: "ml-auto" },
                        [
                          _c("star-rating", {
                            staticClass: "mx-auto",
                            attrs: {
                              increment: 0.5,
                              rating: 2.5,
                              "max-rating": 5,
                              "star-size": 20,
                              "show-rating": false,
                              "inactive-color": "#e1bad9",
                              "active-color": "#b66dff"
                            }
                          })
                        ],
                        1
                      )
                    ]),
                    _vm._m(40)
                  ])
                ]),
                _c("div", { staticClass: "list-item" }, [
                  _vm._m(41),
                  _c("div", { staticClass: "content" }, [
                    _c("div", { staticClass: "d-flex align-items-center" }, [
                      _c("h6", { staticClass: "product-name" }, [
                        _vm._v("Macbook")
                      ]),
                      _c(
                        "small",
                        { staticClass: "time ml-3 d-none d-sm-block" },
                        [_vm._v("12.56 PM")]
                      ),
                      _c(
                        "div",
                        { staticClass: "ml-auto" },
                        [
                          _c("star-rating", {
                            staticClass: "mx-auto",
                            attrs: {
                              increment: 0.5,
                              rating: 2.5,
                              "max-rating": 5,
                              "star-size": 20,
                              "show-rating": false,
                              "inactive-color": "#e1bad9",
                              "active-color": "#b66dff"
                            }
                          })
                        ],
                        1
                      )
                    ]),
                    _vm._m(42)
                  ])
                ]),
                _c("div", { staticClass: "list-item" }, [
                  _vm._m(43),
                  _c("div", { staticClass: "content" }, [
                    _c("div", { staticClass: "d-flex align-items-center" }, [
                      _c("h6", { staticClass: "product-name" }, [
                        _vm._v("Apple watch")
                      ]),
                      _c(
                        "small",
                        { staticClass: "time ml-3 d-none d-sm-block" },
                        [_vm._v("09.24 AM")]
                      ),
                      _c(
                        "div",
                        { staticClass: "ml-auto" },
                        [
                          _c("star-rating", {
                            staticClass: "mx-auto",
                            attrs: {
                              increment: 0.5,
                              rating: 2.5,
                              "max-rating": 5,
                              "star-size": 20,
                              "show-rating": false,
                              "inactive-color": "#e1bad9",
                              "active-color": "#b66dff"
                            }
                          })
                        ],
                        1
                      )
                    ]),
                    _vm._m(44)
                  ])
                ]),
                _c("div", { staticClass: "list-item" }, [
                  _vm._m(45),
                  _c("div", { staticClass: "content" }, [
                    _c("div", { staticClass: "d-flex align-items-center" }, [
                      _c("h6", { staticClass: "product-name" }, [
                        _vm._v("Homepod")
                      ]),
                      _c(
                        "small",
                        { staticClass: "time ml-3 d-none d-sm-block" },
                        [_vm._v("5.12 AM")]
                      ),
                      _c(
                        "div",
                        { staticClass: "ml-auto" },
                        [
                          _c("star-rating", {
                            staticClass: "mx-auto",
                            attrs: {
                              increment: 0.5,
                              rating: 2.5,
                              "max-rating": 5,
                              "star-size": 20,
                              "show-rating": false,
                              "inactive-color": "#e1bad9",
                              "active-color": "#b66dff"
                            }
                          })
                        ],
                        1
                      )
                    ]),
                    _vm._m(46)
                  ])
                ]),
                _c("div", { staticClass: "list-item" }, [
                  _vm._m(47),
                  _c("div", { staticClass: "content" }, [
                    _c("div", { staticClass: "d-flex align-items-center" }, [
                      _c("h6", { staticClass: "product-name" }, [
                        _vm._v("Imac")
                      ]),
                      _c(
                        "small",
                        { staticClass: "time ml-3 d-none d-sm-block" },
                        [_vm._v("10.00 AM")]
                      ),
                      _c(
                        "div",
                        { staticClass: "ml-auto" },
                        [
                          _c("star-rating", {
                            staticClass: "mx-auto",
                            attrs: {
                              increment: 0.5,
                              rating: 2.5,
                              "max-rating": 5,
                              "star-size": 20,
                              "show-rating": false,
                              "inactive-color": "#e1bad9",
                              "active-color": "#b66dff"
                            }
                          })
                        ],
                        1
                      )
                    ]),
                    _vm._m(48)
                  ])
                ])
              ])
            ])
          ]
        ),
        _c(
          "div",
          {
            staticClass:
              "col-xl-5 col-lg-5 col-md-6 col-sm-12 grid-margin stretch-card"
          },
          [
            _c("div", { staticClass: "row flex-grow w-100" }, [
              _c("div", { staticClass: "col-md-12 grid-margin stretch-card" }, [
                _c("div", { staticClass: "card" }, [
                  _c("div", { staticClass: "card-body" }, [
                    _c("h4", { staticClass: "card-title" }, [
                      _vm._v("Traffic source")
                    ]),
                    _c("div", { staticClass: "row" }, [
                      _c(
                        "div",
                        {
                          staticClass: "col-md-6 aligner-wrapper mb-4 mb-md-0"
                        },
                        [
                          _c("trafficSourceChartSocial", {
                            attrs: { height: 400 }
                          }),
                          _vm._m(49)
                        ],
                        1
                      ),
                      _vm._m(50)
                    ])
                  ])
                ])
              ]),
              _vm._m(51)
            ])
          ]
        ),
        _c(
          "div",
          { staticClass: "col-12 col-md-6 col-lg-4 grid-margin stretch-card" },
          [
            _c("div", { staticClass: "card" }, [
              _c("div", { staticClass: "card-body" }, [
                _c(
                  "div",
                  { staticClass: "d-flex justify-content-between" },
                  [
                    _c("h4", { staticClass: "card-title" }, [
                      _vm._v("Activity")
                    ]),
                    _c(
                      "b-dropdown",
                      {
                        staticClass: "btn dotted-btn-transparent",
                        attrs: { id: "ddown7", text: "Dropdown" }
                      },
                      [
                        _c("template", { slot: "button-content" }, [
                          _c("i", { staticClass: "mdi mdi-dots-vertical" })
                        ]),
                        _c("b-dropdown-item", [_vm._v("Today")]),
                        _c("b-dropdown-item", [_vm._v("Yesterday")])
                      ],
                      2
                    )
                  ],
                  1
                ),
                _c("p", { staticClass: "card-description" }, [
                  _vm._v("What's people doing right now")
                ]),
                _vm._m(52),
                _vm._m(53),
                _vm._m(54),
                _vm._m(55)
              ])
            ])
          ]
        ),
        _vm._m(56),
        _vm._m(57)
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "col-xl-3 col-lg-6 col-md-6 col-sm-6 grid-margin stretch-card"
      },
      [
        _c("div", { staticClass: "card card-statistics" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("div", { staticClass: "clearfix" }, [
              _c("div", { staticClass: "float-left" }, [
                _c("i", { staticClass: "mdi mdi-cube text-danger icon-lg" })
              ]),
              _c("div", { staticClass: "float-right" }, [
                _c("p", { staticClass: "mb-0 text-right" }, [
                  _vm._v("Total Revenue")
                ]),
                _c("div", { staticClass: "fluid-container" }, [
                  _c(
                    "h3",
                    { staticClass: "font-weight-medium text-right mb-0" },
                    [_vm._v("$6,560")]
                  )
                ])
              ])
            ]),
            _c("p", { staticClass: "text-muted mt-3 mb-0" }, [
              _c("i", {
                staticClass: "mdi mdi-alert-octagon mr-1",
                attrs: { "aria-hidden": "true" }
              }),
              _vm._v(" 65% lower growth ")
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "col-xl-3 col-lg-6 col-md-6 col-sm-6 grid-margin stretch-card"
      },
      [
        _c("div", { staticClass: "card card-statistics" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("div", { staticClass: "clearfix" }, [
              _c("div", { staticClass: "float-left" }, [
                _c("i", { staticClass: "mdi mdi-receipt text-warning icon-lg" })
              ]),
              _c("div", { staticClass: "float-right" }, [
                _c("p", { staticClass: "mb-0 text-right" }, [_vm._v("Orders")]),
                _c("div", { staticClass: "fluid-container" }, [
                  _c(
                    "h3",
                    { staticClass: "font-weight-medium text-right mb-0" },
                    [_vm._v("3455")]
                  )
                ])
              ])
            ]),
            _c("p", { staticClass: "text-muted mt-3 mb-0" }, [
              _c("i", {
                staticClass: "mdi mdi-bookmark-outline mr-1",
                attrs: { "aria-hidden": "true" }
              }),
              _vm._v(" Product-wise sales ")
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "col-xl-3 col-lg-6 col-md-6 col-sm-6 grid-margin stretch-card"
      },
      [
        _c("div", { staticClass: "card card-statistics" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("div", { staticClass: "clearfix" }, [
              _c("div", { staticClass: "float-left" }, [
                _c("i", {
                  staticClass: "mdi mdi-poll-box text-success icon-lg"
                })
              ]),
              _c("div", { staticClass: "float-right" }, [
                _c("p", { staticClass: "mb-0 text-right" }, [_vm._v("Sales")]),
                _c("div", { staticClass: "fluid-container" }, [
                  _c(
                    "h3",
                    { staticClass: "font-weight-medium text-right mb-0" },
                    [_vm._v("5693")]
                  )
                ])
              ])
            ]),
            _c("p", { staticClass: "text-muted mt-3 mb-0" }, [
              _c("i", {
                staticClass: "mdi mdi-calendar mr-1",
                attrs: { "aria-hidden": "true" }
              }),
              _vm._v(" Weekly Sales ")
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "col-xl-3 col-lg-6 col-md-6 col-sm-6 grid-margin stretch-card"
      },
      [
        _c("div", { staticClass: "card card-statistics" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("div", { staticClass: "clearfix" }, [
              _c("div", { staticClass: "float-left" }, [
                _c("i", {
                  staticClass: "mdi mdi-account-box-multiple text-info icon-lg"
                })
              ]),
              _c("div", { staticClass: "float-right" }, [
                _c("p", { staticClass: "mb-0 text-right" }, [
                  _vm._v("Employees")
                ]),
                _c("div", { staticClass: "fluid-container" }, [
                  _c(
                    "h3",
                    { staticClass: "font-weight-medium text-right mb-0" },
                    [_vm._v("246")]
                  )
                ])
              ])
            ]),
            _c("p", { staticClass: "text-muted mt-3 mb-0" }, [
              _c("i", {
                staticClass: "mdi mdi-reload mr-1",
                attrs: { "aria-hidden": "true" }
              }),
              _vm._v(" Product-wise sales ")
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 stretch-card grid-margin" }, [
      _c(
        "div",
        { staticClass: "card bg-gradient-danger card-img-holder text-white" },
        [
          _c("div", { staticClass: "card-body" }, [
            _c("img", {
              staticClass: "card-img-absolute",
              attrs: {
                src: require("@/assets/images/dashboard/circle.svg"),
                alt: "circle-image"
              }
            }),
            _c("h4", { staticClass: "font-weight-normal mb-3" }, [
              _vm._v("Weekly Sales "),
              _c("i", {
                staticClass: "mdi mdi-chart-line mdi-24px float-right"
              })
            ]),
            _c("h2", { staticClass: "mb-5" }, [_vm._v("$ 15,0000")]),
            _c("h6", { staticClass: "card-text" }, [_vm._v("Increased by 60%")])
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 stretch-card grid-margin" }, [
      _c(
        "div",
        { staticClass: "card bg-gradient-info card-img-holder text-white" },
        [
          _c("div", { staticClass: "card-body" }, [
            _c("img", {
              staticClass: "card-img-absolute",
              attrs: {
                src: require("@/assets/images/dashboard/circle.svg"),
                alt: "circle-image"
              }
            }),
            _c("h4", { staticClass: "font-weight-normal mb-3" }, [
              _vm._v("Weekly Orders "),
              _c("i", {
                staticClass: "mdi mdi-bookmark-outline mdi-24px float-right"
              })
            ]),
            _c("h2", { staticClass: "mb-5" }, [_vm._v("45,6334")]),
            _c("h6", { staticClass: "card-text" }, [_vm._v("Decreased by 10%")])
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 stretch-card grid-margin" }, [
      _c(
        "div",
        { staticClass: "card bg-gradient-success card-img-holder text-white" },
        [
          _c("div", { staticClass: "card-body" }, [
            _c("img", {
              staticClass: "card-img-absolute",
              attrs: {
                src: require("@/assets/images/dashboard/circle.svg"),
                alt: "circle-image"
              }
            }),
            _c("h4", { staticClass: "font-weight-normal mb-3" }, [
              _vm._v("Visitors Online "),
              _c("i", { staticClass: "mdi mdi-diamond mdi-24px float-right" })
            ]),
            _c("h2", { staticClass: "mb-5" }, [_vm._v("95,5741")]),
            _c("h6", { staticClass: "card-text" }, [_vm._v("Increased by 5%")])
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-12 grid-margin" }, [
      _c("div", { staticClass: "card card-statistics" }, [
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            {
              staticClass:
                "card-col col-xl-3 col-lg-6 col-md-6 col-6 border-right"
            },
            [
              _c("div", { staticClass: "card-body" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "d-flex align-items-center justify-content-center flex-column flex-sm-row"
                  },
                  [
                    _c("i", {
                      staticClass:
                        "mdi mdi-account-multiple-outline text-primary mr-0 mr-sm-4 icon-lg"
                    }),
                    _c(
                      "div",
                      { staticClass: "wrapper text-center text-sm-left" },
                      [
                        _c("p", { staticClass: "card-text mb-0" }, [
                          _vm._v("New Users")
                        ]),
                        _c("div", { staticClass: "fluid-container" }, [
                          _c("h3", { staticClass: "mb-0 font-weight-medium" }, [
                            _vm._v("65,650")
                          ])
                        ])
                      ]
                    )
                  ]
                )
              ])
            ]
          ),
          _c(
            "div",
            {
              staticClass:
                "card-col col-xl-3 col-lg-6 col-md-6 col-6 border-right"
            },
            [
              _c("div", { staticClass: "card-body" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "d-flex align-items-center justify-content-center flex-column flex-sm-row"
                  },
                  [
                    _c("i", {
                      staticClass:
                        "mdi mdi-checkbox-marked-circle-outline text-primary mr-0 mr-sm-4 icon-lg"
                    }),
                    _c(
                      "div",
                      { staticClass: "wrapper text-center text-sm-left" },
                      [
                        _c("p", { staticClass: "card-text mb-0" }, [
                          _vm._v("New Feedbacks")
                        ]),
                        _c("div", { staticClass: "fluid-container" }, [
                          _c("h3", { staticClass: "mb-0 font-weight-medium" }, [
                            _vm._v("32,604")
                          ])
                        ])
                      ]
                    )
                  ]
                )
              ])
            ]
          ),
          _c(
            "div",
            {
              staticClass:
                "card-col col-xl-3 col-lg-6 col-md-6 col-6 border-right"
            },
            [
              _c("div", { staticClass: "card-body" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "d-flex align-items-center justify-content-center flex-column flex-sm-row"
                  },
                  [
                    _c("i", {
                      staticClass:
                        "mdi mdi-trophy-outline text-primary mr-0 mr-sm-4 icon-lg"
                    }),
                    _c(
                      "div",
                      { staticClass: "wrapper text-center text-sm-left" },
                      [
                        _c("p", { staticClass: "card-text mb-0" }, [
                          _vm._v("Employees")
                        ]),
                        _c("div", { staticClass: "fluid-container" }, [
                          _c("h3", { staticClass: "mb-0 font-weight-medium" }, [
                            _vm._v("17,583")
                          ])
                        ])
                      ]
                    )
                  ]
                )
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "card-col col-xl-3 col-lg-6 col-md-6 col-6" },
            [
              _c("div", { staticClass: "card-body" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "d-flex align-items-center justify-content-center flex-column flex-sm-row"
                  },
                  [
                    _c("i", {
                      staticClass:
                        "mdi mdi-target text-primary mr-0 mr-sm-4 icon-lg"
                    }),
                    _c(
                      "div",
                      { staticClass: "wrapper text-center text-sm-left" },
                      [
                        _c("p", { staticClass: "card-text mb-0" }, [
                          _vm._v("Total Sales")
                        ]),
                        _c("div", { staticClass: "fluid-container" }, [
                          _c("h3", { staticClass: "mb-0 font-weight-medium" }, [
                            _vm._v("61,119")
                          ])
                        ])
                      ]
                    )
                  ]
                )
              ])
            ]
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-12 grid-margin" }, [
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("h4", { staticClass: "card-title" }, [_vm._v("Recent Tickets")]),
          _c("div", { staticClass: "table-responsive" }, [
            _c("table", { staticClass: "table" }, [
              _c("thead", [
                _c("tr", [
                  _c("th", [_vm._v(" Assignee ")]),
                  _c("th", [_vm._v(" Subject ")]),
                  _c("th", [_vm._v(" Status ")]),
                  _c("th", [_vm._v(" Last Update ")]),
                  _c("th", [_vm._v(" Tracking ID ")])
                ])
              ]),
              _c("tbody", [
                _c("tr", [
                  _c("td", [
                    _c("img", {
                      staticClass: "mr-2",
                      attrs: {
                        src: require("@/assets/images/faces/face1.jpg"),
                        alt: "image"
                      }
                    }),
                    _vm._v(" David Grey ")
                  ]),
                  _c("td", [_vm._v(" Fund is not recieved ")]),
                  _c("td", [
                    _c(
                      "label",
                      { staticClass: "badge badge-gradient-success" },
                      [_vm._v("DONE")]
                    )
                  ]),
                  _c("td", [_vm._v(" Dec 5, 2017 ")]),
                  _c("td", [_vm._v(" WD-12345 ")])
                ]),
                _c("tr", [
                  _c("td", [
                    _c("img", {
                      staticClass: "mr-2",
                      attrs: {
                        src: require("@/assets/images/faces/face2.jpg"),
                        alt: "image"
                      }
                    }),
                    _vm._v(" Stella Johnson ")
                  ]),
                  _c("td", [_vm._v(" High loading time ")]),
                  _c("td", [
                    _c(
                      "label",
                      { staticClass: "badge badge-gradient-warning" },
                      [_vm._v("PROGRESS")]
                    )
                  ]),
                  _c("td", [_vm._v(" Dec 12, 2017 ")]),
                  _c("td", [_vm._v(" WD-12346 ")])
                ]),
                _c("tr", [
                  _c("td", [
                    _c("img", {
                      staticClass: "mr-2",
                      attrs: {
                        src: require("@/assets/images/faces/face3.jpg"),
                        alt: "image"
                      }
                    }),
                    _vm._v(" Marina Michel ")
                  ]),
                  _c("td", [_vm._v(" Website down for one week ")]),
                  _c("td", [
                    _c("label", { staticClass: "badge badge-gradient-info" }, [
                      _vm._v("ON HOLD")
                    ])
                  ]),
                  _c("td", [_vm._v(" Dec 16, 2017 ")]),
                  _c("td", [_vm._v(" WD-12347 ")])
                ]),
                _c("tr", [
                  _c("td", [
                    _c("img", {
                      staticClass: "mr-2",
                      attrs: {
                        src: require("@/assets/images/faces/face4.jpg"),
                        alt: "image"
                      }
                    }),
                    _vm._v(" John Doe ")
                  ]),
                  _c("td", [_vm._v(" Loosing control on server ")]),
                  _c("td", [
                    _c(
                      "label",
                      { staticClass: "badge badge-gradient-danger" },
                      [_vm._v("REJECTED")]
                    )
                  ]),
                  _c("td", [_vm._v(" Dec 3, 2017 ")]),
                  _c("td", [_vm._v(" WD-12348 ")])
                ])
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col-xl-3 col-lg-6 col-md-6 grid-margin stretch-card" },
      [
        _c("div", { staticClass: "card" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("div", { staticClass: "d-flex justify-content-center" }, [
              _c("i", {
                staticClass:
                  "mdi mdi-clock icon-lg text-primary d-flex align-items-center"
              }),
              _c("div", { staticClass: "d-flex flex-column ml-4" }, [
                _c("div", { staticClass: "d-flex flex-column" }, [
                  _c("p", { staticClass: "mb-0" }, [_vm._v("Bounce rate")]),
                  _c("h4", { staticClass: "font-weight-bold" }, [
                    _vm._v("32.16%")
                  ])
                ]),
                _c("small", { staticClass: "text-muted" }, [
                  _vm._v("65.45% on average time")
                ])
              ])
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col-xl-3 col-lg-6 col-md-6 grid-margin stretch-card" },
      [
        _c("div", { staticClass: "card" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("div", { staticClass: "d-flex justify-content-center" }, [
              _c("i", {
                staticClass:
                  "mdi mdi-cart-outline icon-lg text-success d-flex align-items-center"
              }),
              _c("div", { staticClass: "d-flex flex-column ml-4" }, [
                _c("div", { staticClass: "d-flex flex-column" }, [
                  _c("p", { staticClass: "mb-0" }, [_vm._v("Today sales")]),
                  _c("h4", { staticClass: "font-weight-bold" }, [
                    _vm._v("$489,271")
                  ])
                ]),
                _c("small", { staticClass: "text-muted" }, [
                  _vm._v("$489,271 before tax")
                ])
              ])
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col-xl-3 col-lg-6 col-md-6 grid-margin stretch-card" },
      [
        _c("div", { staticClass: "card" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("div", { staticClass: "d-flex justify-content-center" }, [
              _c("i", {
                staticClass:
                  "mdi mdi-laptop icon-lg text-warning d-flex align-items-center"
              }),
              _c("div", { staticClass: "d-flex flex-column ml-4" }, [
                _c("div", { staticClass: "d-flex flex-column" }, [
                  _c("p", { staticClass: "mb-0" }, [_vm._v("Unique visits")]),
                  _c("h4", { staticClass: "font-weight-bold" }, [
                    _vm._v("74.50%")
                  ])
                ]),
                _c("small", { staticClass: "text-muted" }, [
                  _vm._v("80% average duration")
                ])
              ])
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col-xl-3 col-lg-6 col-md-6 grid-margin stretch-card" },
      [
        _c("div", { staticClass: "card" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("div", { staticClass: "d-flex justify-content-center" }, [
              _c("i", {
                staticClass:
                  "mdi mdi-earth icon-lg text-danger d-flex align-items-center"
              }),
              _c("div", { staticClass: "d-flex flex-column ml-4" }, [
                _c("div", { staticClass: "d-flex flex-column" }, [
                  _c("p", { staticClass: "mb-0" }, [_vm._v("Today's visits")]),
                  _c("h4", { staticClass: "font-weight-bold" }, [
                    _vm._v("6,775,440")
                  ])
                ]),
                _c("small", { staticClass: "text-muted" }, [
                  _vm._v("45% higher yesterday")
                ])
              ])
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "clearfix" }, [
      _c("h4", { staticClass: "card-title float-left" }, [
        _vm._v("Visit And Sales Statistics")
      ]),
      _c(
        "div",
        {
          staticClass:
            "rounded-legend legend-horizontal legend-top-right float-right",
          attrs: { id: "visit-sale-chart-legend" }
        },
        [
          _c("ul", [
            _c("li", [
              _c("span", { staticClass: "legend-dots bg-gradient-primary" }),
              _vm._v("CHN ")
            ]),
            _c("li", [
              _c("span", { staticClass: "legend-dots bg-gradient-danger" }),
              _vm._v("USA ")
            ]),
            _c("li", [
              _c("span", { staticClass: "legend-dots bg-gradient-info" }),
              _vm._v("UK ")
            ])
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass: "rounded-legend legend-vertical legend-bottom-left pt-4",
        attrs: { id: "traffic-chart-legend" }
      },
      [
        _c("ul", [
          _c("li", [
            _c("span", { staticClass: "legend-dots bg-gradient-info" }),
            _vm._v("Search Engines "),
            _c("span", { staticClass: "float-right" }, [_vm._v("30%")])
          ]),
          _c("li", [
            _c("span", { staticClass: "legend-dots bg-gradient-success" }),
            _vm._v("Direct Click "),
            _c("span", { staticClass: "float-right" }, [_vm._v("30%")])
          ]),
          _c("li", [
            _c("span", { staticClass: "legend-dots bg-gradient-danger" }),
            _vm._v("Bookmarks Click "),
            _c("span", { staticClass: "float-right" }, [_vm._v("40%")])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "col-xl-4 col-lg-4 col-md-4 col-sm-12 grid-margin stretch-card"
      },
      [
        _c(
          "div",
          { staticClass: "card card-statistics social-card card-default" },
          [
            _c("div", { staticClass: "card-header header-sm" }, [
              _c("div", { staticClass: "d-flex align-items-center" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "wrapper d-flex align-items-center media-info text-facebook"
                  },
                  [
                    _c("i", { staticClass: "mdi mdi-facebook icon-md" }),
                    _c("h2", { staticClass: "card-title ml-3" }, [
                      _vm._v("Facebook")
                    ])
                  ]
                ),
                _c("div", { staticClass: "wrapper ml-auto action-bar" }, [
                  _c("i", { staticClass: "mdi mdi-share-variant mr-3" }),
                  _c("i", { staticClass: "mdi mdi-heart" })
                ])
              ])
            ]),
            _c("div", { staticClass: "card-body" }, [
              _c("img", {
                staticClass: "d-block img-sm rounded-circle mx-auto mb-2",
                attrs: {
                  src: require("@/assets/images/faces/face1.jpg"),
                  alt: "profile image"
                }
              }),
              _c("p", { staticClass: "text-center user-name" }, [
                _vm._v("Mathilda Young")
              ]),
              _c("p", { staticClass: "text-center mb-2 comment" }, [
                _vm._v(
                  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do "
                )
              ]),
              _c(
                "small",
                { staticClass: "d-block mt-4 text-center posted-date" },
                [_vm._v("06 May 2018")]
              )
            ])
          ]
        )
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "col-xl-4 col-lg-4 col-md-4 col-sm-12 grid-margin stretch-card"
      },
      [
        _c(
          "div",
          { staticClass: "card card-statistics social-card card-default" },
          [
            _c("div", { staticClass: "card-header header-sm" }, [
              _c("div", { staticClass: "d-flex align-items-center" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "wrapper d-flex align-items-center media-info text-linkedin"
                  },
                  [
                    _c("i", { staticClass: "mdi mdi-linkedin icon-md" }),
                    _c("h2", { staticClass: "card-title ml-3" }, [
                      _vm._v("Linkedin")
                    ])
                  ]
                ),
                _c("div", { staticClass: "wrapper ml-auto action-bar" }, [
                  _c("i", { staticClass: "mdi mdi-share-variant mr-3" }),
                  _c("i", { staticClass: "mdi mdi-heart" })
                ])
              ])
            ]),
            _c("div", { staticClass: "card-body" }, [
              _c("img", {
                staticClass: "d-block img-sm rounded-circle mx-auto mb-2",
                attrs: {
                  src: require("@/assets/images/faces/face2.jpg"),
                  alt: "profile image"
                }
              }),
              _c("p", { staticClass: "text-center user-name" }, [
                _vm._v("Cameron Fuller")
              ]),
              _c("p", { staticClass: "text-center mb-2 comment" }, [
                _vm._v(
                  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do "
                )
              ]),
              _c(
                "small",
                { staticClass: "d-block mt-4 text-center posted-date" },
                [_vm._v("26 Nov 2018")]
              )
            ])
          ]
        )
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "col-xl-4 col-lg-4 col-md-4 col-sm-12 grid-margin stretch-card"
      },
      [
        _c(
          "div",
          { staticClass: "card card-statistics social-card card-default" },
          [
            _c("div", { staticClass: "card-header header-sm" }, [
              _c("div", { staticClass: "d-flex align-items-center" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "wrapper d-flex align-items-center media-info text-twitter"
                  },
                  [
                    _c("i", { staticClass: "mdi mdi-twitter icon-md" }),
                    _c("h2", { staticClass: "card-title ml-3" }, [
                      _vm._v("Twitter")
                    ])
                  ]
                ),
                _c("div", { staticClass: "wrapper ml-auto action-bar" }, [
                  _c("i", { staticClass: "mdi mdi-share-variant mr-3" }),
                  _c("i", { staticClass: "mdi mdi-heart" })
                ])
              ])
            ]),
            _c("div", { staticClass: "card-body" }, [
              _c("img", {
                staticClass: "d-block img-sm rounded-circle mx-auto mb-2",
                attrs: {
                  src: require("@/assets/images/faces/face3.jpg"),
                  alt: "profile image"
                }
              }),
              _c("p", { staticClass: "text-center user-name" }, [
                _vm._v("Sara Castillo")
              ]),
              _c("p", { staticClass: "text-center mb-2 comment" }, [
                _vm._v(
                  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do "
                )
              ]),
              _c(
                "small",
                { staticClass: "d-block mt-4 text-center posted-date" },
                [_vm._v("11 Jun 2018")]
              )
            ])
          ]
        )
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", { staticClass: "d-flex flex-row align-items-top" }, [
            _c("i", { staticClass: "mdi mdi-facebook text-facebook icon-md" }),
            _c("div", { staticClass: "ml-3" }, [
              _c("h6", { staticClass: "text-facebook" }, [
                _vm._v("2.62 Subscribers")
              ]),
              _c("p", { staticClass: "mt-2 text-muted card-text" }, [
                _vm._v("You main list growing")
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", { staticClass: "d-flex flex-row align-items-top" }, [
            _c("i", { staticClass: "mdi mdi-linkedin text-linkedin icon-md" }),
            _c("div", { staticClass: "ml-3" }, [
              _c("h6", { staticClass: "text-linkedin" }, [
                _vm._v("5k connections")
              ]),
              _c("p", { staticClass: "mt-2 text-muted card-text" }, [
                _vm._v("You main list growing")
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", { staticClass: "d-flex flex-row align-items-top" }, [
            _c("i", { staticClass: "mdi mdi-twitter text-twitter icon-md" }),
            _c("div", { staticClass: "ml-3" }, [
              _c("h6", { staticClass: "text-twitter" }, [
                _vm._v("3k followers")
              ]),
              _c("p", { staticClass: "mt-2 text-muted card-text" }, [
                _vm._v("You main list growing")
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "card-body pb-0" }, [
      _c("p", { staticClass: "text-muted" }, [_vm._v("Total Invoice")]),
      _c("div", { staticClass: "d-flex align-items-center" }, [
        _c("h4", { staticClass: "font-weight-semibold" }, [_vm._v("$65,650")]),
        _c("h6", { staticClass: "text-success font-weight-semibold ml-2" }, [
          _vm._v("+876")
        ])
      ]),
      _c("small", { staticClass: "text-muted" }, [
        _vm._v("This has been a great update.")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "card-body pb-0" }, [
      _c("p", { staticClass: "text-muted" }, [_vm._v("Total expenses")]),
      _c("div", { staticClass: "d-flex align-items-center" }, [
        _c("h4", { staticClass: "font-weight-semibold" }, [_vm._v("$65,650")]),
        _c("h6", { staticClass: "text-danger font-weight-semibold ml-2" }, [
          _vm._v("-43")
        ])
      ]),
      _c("small", { staticClass: "text-muted" }, [_vm._v("view statement")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "card-body pb-0" }, [
      _c("p", { staticClass: "text-muted" }, [_vm._v("Unpaid Invoices")]),
      _c("div", { staticClass: "d-flex align-items-center" }, [
        _c("h4", { staticClass: "font-weight-semibold" }, [_vm._v("$2,542")]),
        _c("h6", { staticClass: "text-success font-weight-semibold ml-2" }, [
          _vm._v("+876")
        ])
      ]),
      _c("small", { staticClass: "text-muted" }, [_vm._v("view history")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "card-body pb-0" }, [
      _c("p", { staticClass: "text-muted" }, [_vm._v("Amount Due")]),
      _c("div", { staticClass: "d-flex align-items-center" }, [
        _c("h4", { staticClass: "font-weight-semibold" }, [_vm._v("$3450")]),
        _c("h6", { staticClass: "text-success font-weight-semibold ml-2" }, [
          _vm._v("+23")
        ])
      ]),
      _c("small", { staticClass: "text-muted" }, [_vm._v("65% lower growth")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-7 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("h4", { staticClass: "card-title" }, [_vm._v("Project Status")]),
          _c("div", { staticClass: "table-responsive" }, [
            _c("table", { staticClass: "table" }, [
              _c("thead", [
                _c("tr", [
                  _c("th", [_vm._v(" # ")]),
                  _c("th", [_vm._v(" Name ")]),
                  _c("th", [_vm._v(" Due Date ")]),
                  _c("th", [_vm._v(" Progress ")])
                ])
              ]),
              _c("tbody", [
                _c("tr", [
                  _c("td", [_vm._v(" 1 ")]),
                  _c("td", [_vm._v(" Herman Beck ")]),
                  _c("td", [_vm._v(" May 15, 2015 ")]),
                  _c("td", [
                    _c("div", { staticClass: "progress" }, [
                      _c("div", {
                        staticClass: "progress-bar bg-gradient-success",
                        staticStyle: { width: "25%" },
                        attrs: {
                          role: "progressbar",
                          "aria-valuenow": "25",
                          "aria-valuemin": "0",
                          "aria-valuemax": "100"
                        }
                      })
                    ])
                  ])
                ]),
                _c("tr", [
                  _c("td", [_vm._v(" 2 ")]),
                  _c("td", [_vm._v(" Messsy Adam ")]),
                  _c("td", [_vm._v(" Jul 01, 2015 ")]),
                  _c("td", [
                    _c("div", { staticClass: "progress" }, [
                      _c("div", {
                        staticClass: "progress-bar bg-gradient-danger",
                        staticStyle: { width: "75%" },
                        attrs: {
                          role: "progressbar",
                          "aria-valuenow": "75",
                          "aria-valuemin": "0",
                          "aria-valuemax": "100"
                        }
                      })
                    ])
                  ])
                ]),
                _c("tr", [
                  _c("td", [_vm._v(" 3 ")]),
                  _c("td", [_vm._v(" John Richards ")]),
                  _c("td", [_vm._v(" Apr 12, 2015 ")]),
                  _c("td", [
                    _c("div", { staticClass: "progress" }, [
                      _c("div", {
                        staticClass: "progress-bar bg-gradient-warning",
                        staticStyle: { width: "90%" },
                        attrs: {
                          role: "progressbar",
                          "aria-valuenow": "90",
                          "aria-valuemin": "0",
                          "aria-valuemax": "100"
                        }
                      })
                    ])
                  ])
                ]),
                _c("tr", [
                  _c("td", [_vm._v(" 4 ")]),
                  _c("td", [_vm._v(" Peter Meggik ")]),
                  _c("td", [_vm._v(" May 15, 2015 ")]),
                  _c("td", [
                    _c("div", { staticClass: "progress" }, [
                      _c("div", {
                        staticClass: "progress-bar bg-gradient-primary",
                        staticStyle: { width: "50%" },
                        attrs: {
                          role: "progressbar",
                          "aria-valuenow": "50",
                          "aria-valuemin": "0",
                          "aria-valuemax": "100"
                        }
                      })
                    ])
                  ])
                ]),
                _c("tr", [
                  _c("td", [_vm._v(" 5 ")]),
                  _c("td", [_vm._v(" Edward ")]),
                  _c("td", [_vm._v(" May 03, 2015 ")]),
                  _c("td", [
                    _c("div", { staticClass: "progress" }, [
                      _c("div", {
                        staticClass: "progress-bar bg-gradient-danger",
                        staticStyle: { width: "35%" },
                        attrs: {
                          role: "progressbar",
                          "aria-valuenow": "35",
                          "aria-valuemin": "0",
                          "aria-valuemax": "100"
                        }
                      })
                    ])
                  ])
                ]),
                _c("tr", [
                  _c("td", [_vm._v(" 5 ")]),
                  _c("td", [_vm._v(" Ronald ")]),
                  _c("td", [_vm._v(" Jun 05, 2015 ")]),
                  _c("td", [
                    _c("div", { staticClass: "progress" }, [
                      _c("div", {
                        staticClass: "progress-bar bg-gradient-info",
                        staticStyle: { width: "65%" },
                        attrs: {
                          role: "progressbar",
                          "aria-valuenow": "65",
                          "aria-valuemin": "0",
                          "aria-valuemax": "100"
                        }
                      })
                    ])
                  ])
                ])
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-5 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("p", { staticClass: "text-gray" }, [
            _vm._v("TUESDAY, APR 9, 2018")
          ]),
          _c("ul", { staticClass: "bullet-line-list pb-3" }, [
            _c("li", [
              _c(
                "div",
                {
                  staticClass:
                    "d-flex align-items-center justify-content-between"
                },
                [
                  _c("div", { staticClass: "d-flex" }, [
                    _c("img", {
                      staticClass: "img-xs rounded-circle",
                      attrs: {
                        src: require("@/assets/images/faces/face9.jpg"),
                        alt: "profile image"
                      }
                    }),
                    _c("div", { staticClass: "ml-3" }, [
                      _c("h6", { staticClass: "mb-0" }, [
                        _vm._v("Snapchat Hosts")
                      ]),
                      _c("small", { staticClass: "text-muted" }, [
                        _vm._v(" Admin Dashboard ")
                      ])
                    ])
                  ]),
                  _c("div", [
                    _c("small", { staticClass: "d-block mb-0" }, [
                      _vm._v("06")
                    ]),
                    _c("small", { staticClass: "text-muted d-block" }, [
                      _vm._v("pm")
                    ])
                  ])
                ]
              )
            ]),
            _c("li", [
              _c(
                "div",
                {
                  staticClass:
                    "d-flex align-items-center justify-content-between"
                },
                [
                  _c("div", { staticClass: "d-flex" }, [
                    _c("img", {
                      staticClass: "img-xs rounded-circle",
                      attrs: {
                        src: require("@/assets/images/faces/face3.jpg"),
                        alt: "profile image"
                      }
                    }),
                    _c("div", { staticClass: "ml-3" }, [
                      _c("h6", { staticClass: "mb-0" }, [
                        _vm._v("Revise Wireframes")
                      ]),
                      _c("small", { staticClass: "text-muted" }, [
                        _vm._v(" Company website ")
                      ])
                    ])
                  ]),
                  _c("div", [
                    _c("small", { staticClass: "d-block mb-0" }, [
                      _vm._v("11")
                    ]),
                    _c("small", { staticClass: "text-muted d-block" }, [
                      _vm._v("pm")
                    ])
                  ])
                ]
              )
            ]),
            _c("li", [
              _c(
                "div",
                {
                  staticClass:
                    "d-flex align-items-center justify-content-between"
                },
                [
                  _c("div", { staticClass: "d-flex" }, [
                    _c("img", {
                      staticClass: "img-xs rounded-circle",
                      attrs: {
                        src: require("@/assets/images/faces/face4.jpg"),
                        alt: "profile image"
                      }
                    }),
                    _c("div", { staticClass: "ml-3" }, [
                      _c("h6", { staticClass: "mb-0" }, [
                        _vm._v("Expert instruction")
                      ]),
                      _c("small", { staticClass: "text-muted" }, [
                        _vm._v(" Profile App ")
                      ])
                    ])
                  ]),
                  _c("div", [
                    _c("small", { staticClass: "d-block mb-0" }, [
                      _vm._v("12")
                    ]),
                    _c("small", { staticClass: "text-muted d-block" }, [
                      _vm._v("pm")
                    ])
                  ])
                ]
              )
            ])
          ]),
          _c("p", { staticClass: "text-gray mt-4" }, [
            _vm._v("TUESDAY, APR 10, 2018")
          ]),
          _c("ul", { staticClass: "bullet-line-list" }, [
            _c("li", [
              _c(
                "div",
                {
                  staticClass:
                    "d-flex align-items-center justify-content-between"
                },
                [
                  _c("div", { staticClass: "d-flex" }, [
                    _c("img", {
                      staticClass: "img-xs rounded-circle",
                      attrs: {
                        src: require("@/assets/images/faces/face7.jpg"),
                        alt: "profile image"
                      }
                    }),
                    _c("div", { staticClass: "ml-3" }, [
                      _c("h6", { staticClass: "mb-0" }, [_vm._v("Great Logo")]),
                      _c("small", { staticClass: "text-muted" }, [
                        _vm._v(" admin logo ")
                      ])
                    ])
                  ]),
                  _c("div", [
                    _c("small", { staticClass: "d-block mb-0" }, [
                      _vm._v("04")
                    ]),
                    _c("small", { staticClass: "text-muted d-block" }, [
                      _vm._v("pm")
                    ])
                  ])
                ]
              )
            ]),
            _c("li", [
              _c(
                "div",
                {
                  staticClass:
                    "d-flex align-items-center justify-content-between"
                },
                [
                  _c("div", { staticClass: "d-flex" }, [
                    _c("img", {
                      staticClass: "img-xs rounded-circle",
                      attrs: {
                        src: require("@/assets/images/faces/face25.jpg"),
                        alt: "profile image"
                      }
                    }),
                    _c("div", { staticClass: "ml-3" }, [
                      _c("h6", { staticClass: "mb-0" }, [
                        _vm._v("Branding Mockup")
                      ]),
                      _c("small", { staticClass: "text-muted" }, [
                        _vm._v(" Company website ")
                      ])
                    ])
                  ]),
                  _c("div", [
                    _c("small", { staticClass: "d-block mb-0" }, [
                      _vm._v("08")
                    ]),
                    _c("small", { staticClass: "text-muted d-block" }, [
                      _vm._v("pm")
                    ])
                  ])
                ]
              )
            ]),
            _c("li", [
              _c(
                "div",
                {
                  staticClass:
                    "d-flex align-items-center justify-content-between"
                },
                [
                  _c("div", { staticClass: "d-flex" }, [
                    _c("img", {
                      staticClass: "img-xs rounded-circle",
                      attrs: {
                        src: require("@/assets/images/faces/face12.jpg"),
                        alt: "profile image"
                      }
                    }),
                    _c("div", { staticClass: "ml-3" }, [
                      _c("h6", { staticClass: "mb-0" }, [
                        _vm._v("Awesome Mobile App")
                      ]),
                      _c("small", { staticClass: "text-muted" }, [
                        _vm._v(" Profile App ")
                      ])
                    ])
                  ]),
                  _c("div", [
                    _c("small", { staticClass: "d-block mb-0" }, [
                      _vm._v("09")
                    ]),
                    _c("small", { staticClass: "text-muted d-block" }, [
                      _vm._v("pm")
                    ])
                  ])
                ]
              )
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-7" }, [
      _c(
        "h4",
        { staticClass: "card-title font-weight-medium mb-0 d-none d-md-block" },
        [_vm._v("Active Users")]
      ),
      _c("div", { staticClass: "wrapper mt-4" }, [
        _c("div", { staticClass: "d-flex justify-content-between mb-2" }, [
          _c("div", { staticClass: "d-flex align-items-center" }, [
            _c("p", { staticClass: "mb-0 font-weight-medium" }, [
              _vm._v("67,550")
            ]),
            _c("small", { staticClass: "text-muted ml-2" }, [
              _vm._v("Email account")
            ])
          ]),
          _c("p", { staticClass: "mb-0 font-weight-medium" }, [_vm._v("80%")])
        ]),
        _c("div", { staticClass: "progress" }, [
          _c("div", {
            staticClass: "progress-bar bg-success",
            staticStyle: { width: "88%" },
            attrs: {
              role: "progressbar",
              "aria-valuenow": "88",
              "aria-valuemin": "0",
              "aria-valuemax": "100"
            }
          })
        ])
      ]),
      _c("div", { staticClass: "wrapper mt-4" }, [
        _c("div", { staticClass: "d-flex justify-content-between mb-2" }, [
          _c("div", { staticClass: "d-flex align-items-center" }, [
            _c("p", { staticClass: "mb-0 font-weight-medium" }, [
              _vm._v("21,435")
            ]),
            _c("small", { staticClass: "text-muted ml-2" }, [
              _vm._v("Requests")
            ])
          ]),
          _c("p", { staticClass: "mb-0 font-weight-medium" }, [_vm._v("34%")])
        ]),
        _c("div", { staticClass: "progress" }, [
          _c("div", {
            staticClass: "progress-bar bg-info",
            staticStyle: { width: "34%" },
            attrs: {
              role: "progressbar",
              "aria-valuenow": "34",
              "aria-valuemin": "0",
              "aria-valuemax": "100"
            }
          })
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-7" }, [
      _c("h4", { staticClass: "card-title font-weight-medium mb-3" }, [
        _vm._v("Amount Due")
      ]),
      _c("h1", { staticClass: "font-weight-medium mb-0" }, [_vm._v("$5998")]),
      _c("p", { staticClass: "text-muted" }, [_vm._v("Milestone Completed")]),
      _c("p", { staticClass: "mb-0" }, [_vm._v("Payment for next week")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col-xl-7 col-lg-7 grid-margin stretch-card" },
      [
        _c("div", { staticClass: "card card-weather" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("div", { staticClass: "weather-date-location" }, [
              _c("h3", [_vm._v("Monday")]),
              _c("p", { staticClass: "text-gray" }, [
                _c("span", { staticClass: "weather-date" }, [
                  _vm._v("25 October, 2016")
                ]),
                _c("span", { staticClass: "weather-location" }, [
                  _vm._v("London, UK")
                ])
              ])
            ]),
            _c("div", { staticClass: "weather-data d-flex" }, [
              _c("div", { staticClass: "mr-auto" }, [
                _c("h4", { staticClass: "display-3" }, [
                  _vm._v("21 "),
                  _c("span", { staticClass: "symbol" }, [_vm._v("°")]),
                  _vm._v("C")
                ]),
                _c("p", [_vm._v(" Mostly Cloudy ")])
              ])
            ])
          ]),
          _c("div", { staticClass: "card-body p-0" }, [
            _c("div", { staticClass: "d-flex weakly-weather" }, [
              _c("div", { staticClass: "weakly-weather-item" }, [
                _c("p", { staticClass: "mb-0" }, [_vm._v(" Sun ")]),
                _c("i", { staticClass: "mdi mdi-weather-cloudy" }),
                _c("p", { staticClass: "mb-0" }, [_vm._v(" 30° ")])
              ]),
              _c("div", { staticClass: "weakly-weather-item" }, [
                _c("p", { staticClass: "mb-1" }, [_vm._v(" Mon ")]),
                _c("i", { staticClass: "mdi mdi-weather-hail" }),
                _c("p", { staticClass: "mb-0" }, [_vm._v(" 31° ")])
              ]),
              _c("div", { staticClass: "weakly-weather-item" }, [
                _c("p", { staticClass: "mb-1" }, [_vm._v(" Tue ")]),
                _c("i", { staticClass: "mdi mdi-weather-partlycloudy" }),
                _c("p", { staticClass: "mb-0" }, [_vm._v(" 28° ")])
              ]),
              _c("div", { staticClass: "weakly-weather-item" }, [
                _c("p", { staticClass: "mb-1" }, [_vm._v(" Wed ")]),
                _c("i", { staticClass: "mdi mdi-weather-pouring" }),
                _c("p", { staticClass: "mb-0" }, [_vm._v(" 30° ")])
              ]),
              _c("div", { staticClass: "weakly-weather-item" }, [
                _c("p", { staticClass: "mb-1" }, [_vm._v(" Thu ")]),
                _c("i", { staticClass: "mdi mdi-weather-pouring" }),
                _c("p", { staticClass: "mb-0" }, [_vm._v(" 29° ")])
              ]),
              _c("div", { staticClass: "weakly-weather-item" }, [
                _c("p", { staticClass: "mb-1" }, [_vm._v(" Fri ")]),
                _c("i", { staticClass: "mdi mdi-weather-snowy-rainy" }),
                _c("p", { staticClass: "mb-0" }, [_vm._v(" 31° ")])
              ]),
              _c("div", { staticClass: "weakly-weather-item" }, [
                _c("p", { staticClass: "mb-1" }, [_vm._v(" Sat ")]),
                _c("i", { staticClass: "mdi mdi-weather-snowy" }),
                _c("p", { staticClass: "mb-0" }, [_vm._v(" 32° ")])
              ])
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", { staticClass: "d-flex flex-row flex-wrap" }, [
            _c("img", {
              staticClass: "img-lg rounded",
              attrs: {
                src: require("@/assets/images/faces/face11.jpg"),
                alt: "profile image"
              }
            }),
            _c("div", { staticClass: "ml-0 ml-xl-3 mt-2 mt-xl-0" }, [
              _c("h6", [_vm._v("Maria")]),
              _c("p", { staticClass: "text-muted" }, [
                _vm._v("maria@gmail.com")
              ]),
              _c("p", { staticClass: "mt-2 text-success font-weight-bold" }, [
                _vm._v("Designer")
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", { staticClass: "d-flex flex-row flex-wrap" }, [
            _c("img", {
              staticClass: "img-lg rounded",
              attrs: {
                src: require("@/assets/images/faces/face9.jpg"),
                alt: "profile image"
              }
            }),
            _c("div", { staticClass: "ml-0 ml-xl-3 mt-2 mt-xl-0" }, [
              _c("h6", [_vm._v("Thomas Edison")]),
              _c("p", { staticClass: "text-muted" }, [
                _vm._v("thomas@gmail.com")
              ]),
              _c("p", { staticClass: "mt-2 text-success font-weight-bold" }, [
                _vm._v("Developer")
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", { staticClass: "d-flex flex-row flex-wrap" }, [
            _c("img", {
              staticClass: "img-lg rounded",
              attrs: {
                src: require("@/assets/images/faces/face12.jpg"),
                alt: "profile image"
              }
            }),
            _c("div", { staticClass: "ml-0 ml-xl-3 mt-2 mt-xl-0" }, [
              _c("h6", [_vm._v("Edward")]),
              _c("p", { staticClass: "text-muted" }, [
                _vm._v("edward@gmail.com")
              ]),
              _c("p", { staticClass: "mt-2 text-success font-weight-bold" }, [
                _vm._v("Tester")
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("img", {
          staticClass: "card-img-top",
          attrs: {
            src: require("@/assets/images/dashboard/img_1.jpg"),
            alt: "card images"
          }
        }),
        _c("div", { staticClass: "card-body pb-0" }, [
          _c("p", { staticClass: "text-muted" }, [
            _vm._v("RAGNAROCK- Museet for pop, Roskilde, Denmark")
          ]),
          _c("h5", [
            _vm._v(
              "It’s good to start or finish the day with delicious pancakes :)"
            )
          ]),
          _c(
            "div",
            {
              staticClass:
                "d-flex align-items-center justify-content-between text-muted border-top py-3 mt-3"
            },
            [
              _c("p", { staticClass: "mb-0" }, [
                _vm._v("Published on May 23, 2018")
              ]),
              _c("div", { staticClass: "wrapper d-flex align-items-center" }, [
                _c("small", { staticClass: "mr-2" }, [_vm._v("93")]),
                _c("i", { staticClass: "mdi mdi-heart-outline" })
              ])
            ]
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("img", {
          staticClass: "card-img-top",
          attrs: {
            src: require("@/assets/images/dashboard/img_2.jpg"),
            alt: "card images"
          }
        }),
        _c("div", { staticClass: "card-body pb-0" }, [
          _c("p", { staticClass: "text-muted" }, [
            _vm._v("RAGNAROCK- Museet for pop, Roskilde, Denmark")
          ]),
          _c("h5", [
            _vm._v(
              "It’s good to start or finish the day with delicious pancakes :)"
            )
          ]),
          _c(
            "div",
            {
              staticClass:
                "d-flex align-items-center justify-content-between text-muted border-top py-3 mt-3"
            },
            [
              _c("p", { staticClass: "mb-0" }, [
                _vm._v("Published on May 23, 2018")
              ]),
              _c("div", { staticClass: "wrapper d-flex align-items-center" }, [
                _c("small", { staticClass: "mr-2" }, [_vm._v("93")]),
                _c("i", { staticClass: "mdi mdi-heart-outline" })
              ])
            ]
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("img", {
          staticClass: "card-img-top",
          attrs: {
            src: require("@/assets/images/dashboard/img_3.jpg"),
            alt: "card images"
          }
        }),
        _c("div", { staticClass: "card-body pb-0" }, [
          _c("p", { staticClass: "text-muted" }, [
            _vm._v("RAGNAROCK- Museet for pop, Roskilde, Denmark")
          ]),
          _c("h5", [
            _vm._v(
              "It’s good to start or finish the day with delicious pancakes :)"
            )
          ]),
          _c(
            "div",
            {
              staticClass:
                "d-flex align-items-center justify-content-between text-muted border-top py-3 mt-3"
            },
            [
              _c("p", { staticClass: "mb-0" }, [
                _vm._v("Published on May 23, 2018")
              ]),
              _c("div", { staticClass: "wrapper d-flex align-items-center" }, [
                _c("small", { staticClass: "mr-2" }, [_vm._v("93")]),
                _c("i", { staticClass: "mdi mdi-heart-outline" })
              ])
            ]
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card aligner-wrapper" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", {
            staticClass: "absolute left top bottom h-100 v-strock-2 bg-success"
          }),
          _c("p", { staticClass: "text-muted mb-2" }, [
            _vm._v("Unpaid Invoices")
          ]),
          _c("div", { staticClass: "d-xl-flex align-items-center" }, [
            _c("h1", { staticClass: "font-weight-medium mb-2" }, [
              _vm._v("$2,156")
            ]),
            _c("h5", { staticClass: "font-weight-medium text-success ml-2" }, [
              _vm._v("−14.2%")
            ])
          ]),
          _c("div", { staticClass: "d-flex align-items-center" }, [
            _c("div", { staticClass: "bg-success dot-indicator" }),
            _c("p", { staticClass: "text-muted mb-0 ml-2" }, [
              _vm._v("This month unpaid invoices $567")
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card aligner-wrapper" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", {
            staticClass: "absolute left top bottom h-100 v-strock-2 bg-primary"
          }),
          _c("p", { staticClass: "text-muted mb-2" }, [_vm._v("Gross volume")]),
          _c("div", { staticClass: "d-xl-flex align-items-center" }, [
            _c("h1", { staticClass: "font-weight-medium mb-2" }, [
              _vm._v("$1,520")
            ]),
            _c("h5", { staticClass: "font-weight-medium text-success ml-2" }, [
              _vm._v("+20.7%")
            ])
          ]),
          _c("div", { staticClass: "d-flex align-items-center" }, [
            _c("div", { staticClass: "bg-primary dot-indicator" }),
            _c("p", { staticClass: "text-muted mb-0 ml-2" }, [
              _vm._v("Next payout -23 aug- $233")
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-4 grid-margin stretch-card" }, [
      _c("div", { staticClass: "card aligner-wrapper" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", {
            staticClass: "absolute left top bottom h-100 v-strock-2 bg-danger"
          }),
          _c("p", { staticClass: "text-muted mb-2" }, [
            _vm._v("Average revenue")
          ]),
          _c("div", { staticClass: "d-xl-flex align-items-center" }, [
            _c("h1", { staticClass: "font-weight-medium mb-2" }, [
              _vm._v("$6.60")
            ]),
            _c("h5", { staticClass: "font-weight-medium text-success ml-2" }, [
              _vm._v("+296.6%")
            ])
          ]),
          _c("div", { staticClass: "d-flex align-items-center" }, [
            _c("div", { staticClass: "bg-danger dot-indicator" }),
            _c("p", { staticClass: "text-muted mb-0 ml-2" }, [
              _vm._v("Payout for next week $100 ")
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "preview-image" }, [
      _c("img", {
        staticClass: "img-sm rounded-circle",
        attrs: {
          src: require("@/assets/images/faces/face10.jpg"),
          alt: "profile image"
        }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "d-flex align-items-center" }, [
      _c("p", { staticClass: "user-name" }, [_vm._v("Christine :")]),
      _c("p", { staticClass: "review-text d-block" }, [
        _vm._v("The brand apple is original !")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "preview-image" }, [
      _c("img", {
        staticClass: "img-sm rounded-circle",
        attrs: {
          src: require("@/assets/images/faces/face13.jpg"),
          alt: "profile image"
        }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "d-flex align-items-center" }, [
      _c("p", { staticClass: "user-name" }, [_vm._v("Arthur Cole :")]),
      _c("p", { staticClass: "review-text d-block" }, [
        _vm._v("The brand apple is original also the iphone x.")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "preview-image" }, [
      _c("img", {
        staticClass: "img-sm rounded-circle",
        attrs: {
          src: require("@/assets/images/faces/face1.jpg"),
          alt: "profile image"
        }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "d-flex align-items-center" }, [
      _c("p", { staticClass: "user-name" }, [_vm._v("James Tate :")]),
      _c("p", { staticClass: "review-text d-block" }, [
        _vm._v("The brand apple is original.")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "preview-image" }, [
      _c("img", {
        staticClass: "img-sm rounded-circle",
        attrs: {
          src: require("@/assets/images/faces/face11.jpg"),
          alt: "profile image"
        }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "d-flex align-items-center" }, [
      _c("p", { staticClass: "user-name" }, [_vm._v("Clyde Parker :")]),
      _c("p", { staticClass: "review-text d-block" }, [
        _vm._v("The brand apple is original also the iphone !!")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "preview-image" }, [
      _c("img", {
        staticClass: "img-sm rounded-circle",
        attrs: {
          src: require("@/assets/images/faces/face12.jpg"),
          alt: "profile image"
        }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "d-flex align-items-center" }, [
      _c("p", { staticClass: "user-name" }, [_vm._v("James Tate :")]),
      _c("p", { staticClass: "review-text d-block" }, [
        _vm._v("The brand apple is original.")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "wrapper d-flex flex-column justify-content-center absolute absolute-center"
      },
      [_c("h4", { staticClass: "text-center mb-0" }, [_vm._v("60%")])]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-6 legend-wrapper" }, [
      _c("div", { staticClass: "d-flex mb-3" }, [
        _c("div", { staticClass: "dot-indicator bg-secondary mt-1 mr-2" }),
        _c(
          "div",
          { staticClass: "d-flex flex-column justify-content-center" },
          [
            _c("p", { staticClass: "mb-0" }, [_vm._v("Google")]),
            _c("small", { staticClass: "text-muted" }, [
              _vm._v("67,342 (78.05%)")
            ])
          ]
        )
      ]),
      _c("div", { staticClass: "d-flex my-3" }, [
        _c("div", { staticClass: "dot-indicator bg-success mt-1 mr-2" }),
        _c(
          "div",
          { staticClass: "d-flex flex-column justify-content-center" },
          [
            _c("p", { staticClass: "mb-0" }, [_vm._v("Yahoo")]),
            _c("small", { staticClass: "text-muted" }, [
              _vm._v("67,342 (78.05%)")
            ])
          ]
        )
      ]),
      _c("div", { staticClass: "d-flex mt-3" }, [
        _c("div", { staticClass: "dot-indicator bg-danger mt-1 mr-2" }),
        _c(
          "div",
          { staticClass: "d-flex flex-column justify-content-center" },
          [
            _c("p", { staticClass: "mb-0" }, [_vm._v("Bing")]),
            _c("small", { staticClass: "text-muted" }, [
              _vm._v("67,342 (78.05%)")
            ])
          ]
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-12 stretch-card" }, [
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("h4", { staticClass: "card-title" }, [_vm._v("Storage Space")]),
          _c("small", { staticClass: "text-muted" }, [_vm._v("Used space")]),
          _c("h4", [_vm._v("45.670/50.000")]),
          _c("div", { staticClass: "progress grouped" }, [
            _c("div", {
              staticClass: "progress-bar",
              staticStyle: { width: "15%" },
              attrs: {
                role: "progressbar",
                "aria-valuenow": "15",
                "aria-valuemin": "0",
                "aria-valuemax": "100"
              }
            }),
            _c("div", {
              staticClass: "progress-bar bg-success",
              staticStyle: { width: "30%" },
              attrs: {
                role: "progressbar",
                "aria-valuenow": "30",
                "aria-valuemin": "0",
                "aria-valuemax": "100"
              }
            }),
            _c("div", {
              staticClass: "progress-bar bg-danger",
              staticStyle: { width: "20%" },
              attrs: {
                role: "progressbar",
                "aria-valuenow": "20",
                "aria-valuemin": "0",
                "aria-valuemax": "100"
              }
            })
          ]),
          _c(
            "div",
            {
              staticClass: "d-flex justify-content-between border-top mt-4 pt-4"
            },
            [
              _c("div", { staticClass: "d-flex" }, [
                _c("div", {
                  staticClass: "dot-indicator bg-primary mt-1 mr-2"
                }),
                _c("div", { staticClass: "d-flex flex-column" }, [
                  _c("p", { staticClass: "mb-0" }, [_vm._v("Documents")]),
                  _c("small", { staticClass: "text-gray" }, [
                    _vm._v("18.00 GB")
                  ])
                ])
              ]),
              _c("div", { staticClass: "d-flex" }, [
                _c("div", {
                  staticClass: "dot-indicator bg-success mt-1 mr-2"
                }),
                _c("div", { staticClass: "d-flex flex-column" }, [
                  _c("p", { staticClass: "mb-0" }, [_vm._v("Images")]),
                  _c("small", { staticClass: "text-gray" }, [
                    _vm._v("10.00 GB")
                  ])
                ])
              ]),
              _c("div", { staticClass: "d-flex" }, [
                _c("div", { staticClass: "dot-indicator bg-danger mt-1 mr-2" }),
                _c("div", { staticClass: "d-flex flex-column" }, [
                  _c("p", { staticClass: "mb-0" }, [_vm._v("Mail")]),
                  _c("small", { staticClass: "text-gray" }, [
                    _vm._v("02.00 GB")
                  ])
                ])
              ])
            ]
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "list d-flex align-items-center border-bottom py-3" },
      [
        _c("img", {
          staticClass: "img-sm rounded-circle",
          attrs: { src: require("@/assets/images/faces/face4.jpg"), alt: "" }
        }),
        _c("div", { staticClass: "wrapper w-100 ml-3" }, [
          _c("p", { staticClass: "mb-0" }, [
            _c("b", [_vm._v("Dobrick ")]),
            _vm._v("posted in Material")
          ]),
          _c(
            "div",
            {
              staticClass:
                "d-xl-flex justify-content-between align-items-center"
            },
            [
              _c("div", { staticClass: "d-flex align-items-center" }, [
                _c("i", { staticClass: "mdi mdi-clock text-muted mr-1" }),
                _c("p", { staticClass: "mb-0" }, [_vm._v("That's awesome!")])
              ]),
              _c("small", { staticClass: "text-muted ml-auto" }, [
                _vm._v("2 hours ago")
              ])
            ]
          )
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "list d-flex align-items-center border-bottom py-3" },
      [
        _c("img", {
          staticClass: "img-sm rounded-circle",
          attrs: { src: require("@/assets/images/faces/face5.jpg"), alt: "" }
        }),
        _c("div", { staticClass: "wrapper w-100 ml-3" }, [
          _c("p", { staticClass: "mb-0" }, [
            _c("b", [_vm._v("Stella ")]),
            _vm._v("posted in Material")
          ]),
          _c(
            "div",
            {
              staticClass:
                "d-xl-flex justify-content-between align-items-center"
            },
            [
              _c("div", { staticClass: "d-flex align-items-center" }, [
                _c("i", { staticClass: "mdi mdi-clock text-muted mr-1" }),
                _c("p", { staticClass: "mb-0" }, [_vm._v("That's awesome!")])
              ]),
              _c("small", { staticClass: "text-muted ml-auto" }, [
                _vm._v("3 hours ago")
              ])
            ]
          )
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "list d-flex align-items-center border-bottom py-3" },
      [
        _c("img", {
          staticClass: "img-sm rounded-circle",
          attrs: { src: require("@/assets/images/faces/face7.jpg"), alt: "" }
        }),
        _c("div", { staticClass: "wrapper w-100 ml-3" }, [
          _c("p", { staticClass: "mb-0" }, [
            _c("b", [_vm._v("Peter ")]),
            _vm._v("posted in Material")
          ]),
          _c(
            "div",
            {
              staticClass:
                "d-xl-flex justify-content-between align-items-center"
            },
            [
              _c("div", { staticClass: "d-flex align-items-center" }, [
                _c("i", { staticClass: "mdi mdi-clock text-muted mr-1" }),
                _c("p", { staticClass: "mb-0" }, [_vm._v("That's Great!")])
              ]),
              _c("small", { staticClass: "text-muted ml-auto" }, [
                _vm._v("1 hours ago")
              ])
            ]
          )
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "list d-flex align-items-center pt-3" }, [
      _c("img", {
        staticClass: "img-sm rounded-circle",
        attrs: { src: require("@/assets/images/faces/face6.jpg"), alt: "" }
      }),
      _c("div", { staticClass: "wrapper w-100 ml-3" }, [
        _c("p", { staticClass: "mb-0" }, [
          _c("b", [_vm._v("Nateila ")]),
          _vm._v("posted in Material")
        ]),
        _c(
          "div",
          {
            staticClass: "d-xl-flex justify-content-between align-items-center"
          },
          [
            _c("div", { staticClass: "d-flex align-items-center" }, [
              _c("i", { staticClass: "mdi mdi-clock text-muted mr-1" }),
              _c("p", { staticClass: "mb-0" }, [_vm._v("That's awesome!")])
            ]),
            _c("small", { staticClass: "text-muted ml-auto" }, [
              _vm._v("1 hours ago")
            ])
          ]
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col-12 col-md-6 col-lg-4 grid-margin stretch-card" },
      [
        _c("div", { staticClass: "card" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("h4", { staticClass: "card-title" }, [_vm._v("Recomended")]),
            _c(
              "div",
              {
                staticClass:
                  "wrapper d-flex align-items-center py-2 border-bottom"
              },
              [
                _c("img", {
                  staticClass: "img-sm rounded-circle",
                  attrs: {
                    src: require("@/assets/images/faces/face5.jpg"),
                    alt: "profile"
                  }
                }),
                _c("div", { staticClass: "wrapper ml-3" }, [
                  _c("h6", { staticClass: "ml-1 mb-1" }, [
                    _vm._v("Stella Davidson")
                  ]),
                  _c("small", { staticClass: "text-muted mb-0" }, [
                    _c("i", { staticClass: "mdi mdi-map-marker-outline mr-1" }),
                    _vm._v("New York City, USA")
                  ])
                ]),
                _c(
                  "div",
                  {
                    staticClass:
                      "badge badge-pill badge-success ml-auto px-1 py-1"
                  },
                  [_c("i", { staticClass: "mdi mdi-check" })]
                )
              ]
            ),
            _c(
              "div",
              {
                staticClass:
                  "wrapper d-flex align-items-center py-2 border-bottom"
              },
              [
                _c("img", {
                  staticClass: "img-sm rounded-circle",
                  attrs: {
                    src: require("@/assets/images/faces/face6.jpg"),
                    alt: "profile"
                  }
                }),
                _c("div", { staticClass: "wrapper ml-3" }, [
                  _c("h6", { staticClass: "ml-1 mb-1" }, [
                    _vm._v("Daniel Russel")
                  ]),
                  _c("small", { staticClass: "text-muted mb-0" }, [
                    _c("i", { staticClass: "mdi mdi-map-marker-outline mr-1" }),
                    _vm._v("Florida, USA")
                  ])
                ]),
                _c(
                  "div",
                  {
                    staticClass:
                      "badge badge-pill badge-success ml-auto px-1 py-1"
                  },
                  [_c("i", { staticClass: "mdi mdi-plus" })]
                )
              ]
            ),
            _c(
              "div",
              {
                staticClass:
                  "wrapper d-flex align-items-center py-2 border-bottom"
              },
              [
                _c("img", {
                  staticClass: "img-sm rounded-circle",
                  attrs: {
                    src: require("@/assets/images/faces/face7.jpg"),
                    alt: "profile"
                  }
                }),
                _c("div", { staticClass: "wrapper ml-3" }, [
                  _c("h6", { staticClass: "ml-1 mb-1" }, [
                    _vm._v("Bruno King")
                  ]),
                  _c("small", { staticClass: "text-muted mb-0" }, [
                    _c("i", { staticClass: "mdi mdi-map-marker-outline mr-1" }),
                    _vm._v("Arkansas, USA")
                  ])
                ]),
                _c(
                  "div",
                  {
                    staticClass:
                      "badge badge-pill badge-success ml-auto px-1 py-1"
                  },
                  [_c("i", { staticClass: "mdi mdi-check" })]
                )
              ]
            ),
            _c(
              "div",
              {
                staticClass:
                  "wrapper d-flex align-items-center py-2 border-bottom"
              },
              [
                _c("img", {
                  staticClass: "img-sm rounded-circle",
                  attrs: {
                    src: require("@/assets/images/faces/face8.jpg"),
                    alt: "profile"
                  }
                }),
                _c("div", { staticClass: "wrapper ml-3" }, [
                  _c("h6", { staticClass: "ml-1 mb-1" }, [
                    _vm._v("David Moore")
                  ]),
                  _c("small", { staticClass: "text-muted mb-0" }, [
                    _c("i", { staticClass: "mdi mdi-map-marker-outline mr-1" }),
                    _vm._v("Arizon, USA")
                  ])
                ]),
                _c(
                  "div",
                  {
                    staticClass:
                      "badge badge-pill badge-success ml-auto px-1 py-1"
                  },
                  [_c("i", { staticClass: "mdi mdi-plus" })]
                )
              ]
            ),
            _c(
              "div",
              { staticClass: "wrapper d-flex align-items-center pt-2" },
              [
                _c("img", {
                  staticClass: "img-sm rounded-circle",
                  attrs: {
                    src: require("@/assets/images/faces/face9.jpg"),
                    alt: "profile"
                  }
                }),
                _c("div", { staticClass: "wrapper ml-3" }, [
                  _c("h6", { staticClass: "ml-1 mb-1" }, [
                    _vm._v("Rafell John")
                  ]),
                  _c("small", { staticClass: "text-muted mb-0" }, [
                    _c("i", { staticClass: "mdi mdi-map-marker-outline mr-1" }),
                    _vm._v("Alaska, USA")
                  ])
                ]),
                _c(
                  "div",
                  {
                    staticClass:
                      "badge badge-pill badge-success ml-auto px-1 py-1"
                  },
                  [_c("i", { staticClass: "mdi mdi-plus" })]
                )
              ]
            )
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col-md-12 col-lg-4 grid-margin stretch-card" },
      [
        _c("div", { staticClass: "card" }, [
          _c("div", { staticClass: "card-body" }, [
            _c("h4", { staticClass: "card-title" }, [_vm._v("Updates")]),
            _c("ul", { staticClass: "bullet-line-list" }, [
              _c("li", [
                _c("h6", [_vm._v("User confirmation")]),
                _c("p", [
                  _vm._v("Lorem Ipsum is simply dummy text of the printing")
                ]),
                _c("p", { staticClass: "text-muted" }, [
                  _c("i", { staticClass: "mdi mdi-clock" }),
                  _vm._v(" 7 months ago.")
                ])
              ]),
              _c("li", [
                _c("h6", [_vm._v("Continuous evaluation")]),
                _c("p", [
                  _vm._v("Lorem Ipsum is simply dummy text of the printing")
                ]),
                _c("p", { staticClass: "text-muted" }, [
                  _c("i", { staticClass: "mdi mdi-clock" }),
                  _vm._v(" 7 months ago.")
                ])
              ]),
              _c("li", [
                _c("h6", [_vm._v("Promotion")]),
                _c("p", [
                  _vm._v("Lorem Ipsum is simply dummy text of the printing")
                ]),
                _c("p", { staticClass: "text-muted" }, [
                  _c("i", { staticClass: "mdi mdi-clock" }),
                  _vm._v(" 7 months ago.")
                ])
              ])
            ])
          ])
        ])
      ]
    )
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}