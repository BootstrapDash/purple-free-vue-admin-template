{"remainingRequest":"/Users/jyothish/Documents/purple-free-vue-admin-template/template/demo_1/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jyothish/Documents/purple-free-vue-admin-template/template/demo_1/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jyothish/Documents/purple-free-vue-admin-template/template/demo_1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jyothish/Documents/purple-free-vue-admin-template/template/demo_1/src/pages/basic-ui/typography.vue?vue&type=template&id=7f5b57d7&","dependencies":[{"path":"/Users/jyothish/Documents/purple-free-vue-admin-template/template/demo_1/src/pages/basic-ui/typography.vue","mtime":1605587475605},{"path":"/Users/jyothish/Documents/purple-free-vue-admin-template/template/demo_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/purple-free-vue-admin-template/template/demo_1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/purple-free-vue-admin-template/template/demo_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/purple-free-vue-admin-template/template/demo_1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}